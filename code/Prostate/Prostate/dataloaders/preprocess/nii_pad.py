import numpy as np
from scipy.ndimage import gaussian_filter
import random
import os
import SimpleITK as sitk
import sys, time
import nibabel as nib
from scipy import ndimage
from tqdm import tqdm
import argparse
import os
import h5py




parse = argparse.ArgumentParser()
parse.add_argument("--imagesTr_path", default="/home/psh/data/Brats19_numclass_2/data/BraTs2019_nii/images_norm",
                   type=str, help="Path to raw images")
parse.add_argument("--labelsTr_path", default="/home/psh/data/Brats19_numclass_2/data/BraTs2019_nii/labels_norm",
                   type=str, help="Path to raw images")
#parse.add_argument("--nii_save_img_path", default="/home/psh/data/Brats19_numclass_2/data/BraTs2019_nii/images", type=str,
#                   help="Path to save masks generated by CarveMix")
#parse.add_argument("--nii_save_label_path", default="/home/psh/data/Brats19_numclass_2/data/BraTs2019_nii/labels", type=str,
#                   help="Path to save masks generated by CarveMix")
args = parse.parse_args()



Cases = os.listdir(args.imagesTr_path)


## padding전 가장 큰 image size print
'''
x_max, y_max, z_max = 0,0,0     ##brats_2class
for i in tqdm(range(len(Cases)), desc="mixing:"):

    image_path = os.path.join(args.imagesTr_path, Cases[i] )
    name = Cases[i].split('/')[-1]
    name = name[:-3]

    h5f = h5py.File(image_path, 'r')
    image = h5f['image'][:]
    label = h5f['label'][:]

    ## padding전 가장 큰 image size print
    
    x,y,z = label.shape[0],label.shape[1],label.shape[2]
    print('____________________________________________________________')
    if x > x_max :
        x_max = x
        #print('x:{}'.format(x))
    if y > y_max :
        y_max = y
        #print('y:{}'.format(y))
    if z > z_max:
        z_max = z
        #print('z:{}'.format(z))

print(x_max, y_max, z_max)
'''


x_max, y_max, z_max = 192,192,160     ##brats_2class
for i in tqdm(range(len(Cases)), desc="mixing:"):

    image_path = os.path.join(args.imagesTr_path, Cases[i] )
    name = Cases[i].split('/')[-1]
    name = name[:-7]

    image = nib.load(image_path)
    affine = image.affine
    image = image.get_fdata()

    label_path = os.path.join(args.labelsTr_path, Cases[i])
    label = nib.load(label_path)
    label = label.get_fdata()


    # pad the sample if necessary
    if label.shape[0] <= x_max or label.shape[1] <=  y_max or label.shape[2] <= z_max:
        pw = max((x_max - label.shape[0])//2 +1 ,0)
        ph = max((y_max - label.shape[1])//2 +1, 0)
        pd = max((z_max - label.shape[2])//2 +1 ,0)
        image = np.pad(image, [(pw, pw), (ph, ph), (pd, pd)], mode='constant', constant_values=0)
        label = np.pad(label, [(pw, pw), (ph, ph), (pd, pd)], mode='constant', constant_values=0)

    ## 0ver pad -> crop
    if image.shape[0] > x_max:
        image = image[:x_max,:,:]
        label = label[:x_max,:, :]
    if image.shape[1] > y_max:
        image = image[:, :y_max, :]
        label = label[:, :y_max, :]
    if image.shape[2] > z_max:
        image = image[:, :, :z_max]
        label = label[:, :, :z_max]

    c_path = '/home/psh/data/Brats19_numclass_2/data/BraTs2019_nii/images_norm_pad'
    m_path = '/home/psh/data/Brats19_numclass_2/data/BraTs2019_nii/labels_norm_pad'

    if not os.path.exists(c_path):
        os.makedirs(c_path)
    if not os.path.exists(m_path):
        os.makedirs(m_path)

    c_path2 = c_path + '/{}.nii.gz'.format(name)
    m_path2 = m_path + '/{}.nii.gz'.format(name)



    ct_t = nib.Nifti1Image(image, affine)
    mask_t = nib.Nifti1Image(label, affine)
    nib.save(ct_t, c_path2)
    nib.save(mask_t, m_path2)


